{"version":3,"sources":["../../source/scripts/main/main.js"],"names":[],"mappings":"AAAA;;AACA,CAAC,UAAC,MAAD,EAAS,QAAT,EAAsB;AACnB,QAAI,OAAO,SAAP,IAAO,GAAM;;;;AAIb,YAAI,MAAM;AACF,sBAAU,OAAV;AACA,iBAAK,2DAAL;AACA,kBAAM,4BAAN;AACA,oBAAQ,MAAR;SAJJ;YAMA,QAAQ,OAAO,IAAP,CAAY,KAAZ,EAAR;YACA,aAAa,SAAb,UAAa,CAAC,IAAD,EAAU;AACnB,oBAAQ,GAAR,CAAY,IAAZ,EADmB;SAAV;YAGb,YAAY,SAAZ,SAAY,KAAM;AACd,cAAE,IAAF,CAAO;AACH,6BAAa,IAAb;AACA,sBAAM,KAAN;;;;AAIA,uBAAO,KAAP;;AAEA,qBAAK,IAAI,IAAJ,GAAW,4BAAX,GAA0C,EAA1C;AACL,0BAAU,MAAV;;;;;AATG,aAAP,EAcG,IAdH,CAcQ,UAAC,IAAD,EAAO,UAAP,EAAmB,KAAnB,EAA6B;AACjC,wBAAQ,GAAR,CAAY,IAAZ,EADiC;aAA7B,CAdR,CADc;SAAN;YAmBZ,SAAS,SAAT,MAAS,CAAC,IAAD,EAAU;AACf,oBAAQ,GAAR,CAAY,aAAZ,EADe;SAAV;YAGT,oBAAoB,SAApB,iBAAoB,CAAC,MAAD,EAAS,GAAT,EAAc,MAAd,EAAyB;AACzC,gBAAI,MAAM,IAAI,cAAJ,EAAN,CADqC;AAEzC,gBAAI,qBAAqB,GAArB,EAA0B;;;AAG1B,oBAAI,IAAJ,CAAS,MAAT,EAAiB,GAAjB,EAAsB,IAAtB,EAH0B;aAA9B,MAIO,IAAI,OAAO,cAAP,KAA0B,WAA1B,EAAuC;;;AAG9C,sBAAM,IAAI,cAAJ,EAAN,CAH8C;AAI9C,oBAAI,IAAJ,CAAS,MAAT,EAAiB,GAAjB,EAJ8C;aAA3C,MAKA;;AAEH,sBAAM,IAAN,CAFG;aALA;AASP,gBAAI,MAAJ,GAAa,YAAM;AACf,oBAAI,eAAe,IAAI,YAAJ,CADJ;AAEf,wBAAQ,GAAR,CAAY,YAAZ,EAFe;aAAN,CAf4B;AAmBzC,gBAAI,OAAJ,GAAc,YAAW;AACrB,wBAAQ,GAAR,CAAY,qBAAZ,EADqB;aAAX,CAnB2B;AAsBzC,mBAAO,GAAP,CAtByC;SAAzB;YAwBpB,MAAM,kBAAkB,KAAlB,EAAyB,IAAI,IAAJ,GAAW,4BAAX,GAA0C,IAAI,MAAJ,EAAY,MAA/E,CAAN,CA5DS;AA6Db,YAAI,CAAC,GAAD,EAAM;AACN,kBAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN,CADM;SAAV;;;;;;;;;;AA7Da,iBAyEb,CAAU,IAAV;;;;;;;;;;;;;AAzEa,KAAN,CADQ;AAyFnB,MAAE,QAAF,EAAY,KAAZ,CAAkB,IAAlB,EAzFmB;CAAtB,CAAD,CA0FG,MA1FH,EA0FW,QA1FX","file":"main.js","sourcesContent":["'use strict';\n((window, document) => {\n    let init = () => {\n\t//alert('doc test ready');\n\t// http://keithratner.com/wp-json/posts\n\t// http://www.keithratner.com/?wpapi=get_posts&dev=1&id=2063\n        let api = {\n                dataType: 'jsonp',\n                uri: 'http://www.keithratner.com/?wpapi=get_posts&dev=1&id=2063',\n                root: 'http://www.keithratner.com',\n                postid: '2063'\n            },\n            model = window.Core.Model(),\n            renderPost = (post) => {\n                console.log(post);\n            },\n            getPostId = id => {\n                $.ajax({\n                    crossDomain: true,\n                    type: 'GET',\n                    //headers: {'Access-Control-Allow-Origin': '*'},\n                    //jsonpCallback: 'jsonhandler',\n                    //contentType: 'application/json; charset=utf-8',\n                    async: false,\n                    //jsonp: 'callback',\n                    url: api.root + '?wpapi=get_posts&dev=1&id=' + id,\n                    dataType: 'json'\n                    // jsonp: 'jsonp'\n                    // success: function(data) {\n                    //     console.log(data);\n                    // }\n                }).then((post, textStatus, jqXHR) => {\n                    console.log(post);\n                });\n            },\n            onload = (data) => {\n                console.log('data loaded');\n            },\n            createCORSRequest = (method, url, onload) => {\n                var xhr = new XMLHttpRequest();\n                if ('withCredentials' in xhr) {\n                    // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n                    // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n                    xhr.open(method, url, true);\n                } else if (typeof XDomainRequest !== 'undefined') {\n                    // Otherwise, check if XDomainRequest.\n                    // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n                    xhr = new XDomainRequest();\n                    xhr.open(method, url);\n                } else {\n                    // Otherwise, CORS is not supported by the browser.\n                    xhr = null;\n                }\n                xhr.onload = () => {\n                    var responseText = xhr.responseText;\n                    console.log(responseText);\n                };\n                xhr.onerror = function() {\n                    console.log('There was an error!');\n                };\n                return xhr;\n            }, \n            xhr = createCORSRequest('GET', api.root + '?wpapi=get_posts&dev=1&id=' + api.postid, onload);\n        if (!xhr) {\n            throw new Error('CORS not supported');\n        }\n            // getPostId = id => model.httpRequest(api.root + '?wpapi=get_posts&dev=1&id=' + id)\n            //     .get()\n            //     .then((data) => {\n            //         let post = JSON.parse(data);\n            //         renderPost(post);\n            //     })\n            //     .catch((data) => {\n            //         console.log(data);\n            //     });\n        getPostId(2063);\n        // $.ajax({\n        //     type: 'GET',\n        //     url: 'https://graph.facebook.com/10150232496792613',\n        //     dataType: 'jsonp',\n        //     success: function(data) {\n        //         console.log(data);\n        //     }\n        // });\n\n\n        // $.ajax({\n        //     url: api.uri\n        // });\n    };\n    $(document).ready(init);\n})(window, document);\n"]}